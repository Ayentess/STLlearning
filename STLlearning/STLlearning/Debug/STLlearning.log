  STL.cpp
D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1528,14): error C3848: 具有类型“const comparePerson”的表达式会丢失一些 const-volatile 限定符以调用“bool comparePerson::operator ()(Person &,Person &)”
  (编译源文件“STL.cpp”)
      D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1528,14):
      尝试匹配参数列表“(const _Kty, const _Keyty)”时
          with
          [
              _Kty=Person
          ]
          and
          [
              _Keyty=Person
          ]
      D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1528,14):
      模板实例化上下文(最早的实例化上下文)为
          D:\vs2022Project\STLlearning\STLlearning\STL.cpp(1882,7):
          查看对正在编译的函数 模板 实例化“std::pair<std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<Person>>>,bool> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert<false,0>(const Person &)”的引用
          with
          [
              _Kty=Person,
              _Pr=comparePerson,
              _Alloc=std::allocator<Person>
          ]
              D:\vs2022Project\STLlearning\STLlearning\STL.cpp(1882,13):
              请参阅 "test01" 中对 "std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::insert" 的第一个引用
          with
          [
              _Kty=Person,
              _Pr=comparePerson,
              _Alloc=std::allocator<Person>
          ]
          D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xtree(1211,30):
          查看对正在编译的函数 模板 实例化“std::pair<std::_Tree_node<Person,std::_Default_allocator_traits<_Alloc>::void_pointer> *,bool> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Emplace<const Person&>(const Person &)”的引用
          with
          [
              _Alloc=std::allocator<Person>,
              _Kty=Person,
              _Pr=comparePerson
          ]
          D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xtree(993,35):
          查看对正在编译的函数 模板 实例化“std::_Tree_find_result<std::_Tree_node<Person,std::_Default_allocator_traits<_Alloc>::void_pointer> *> std::_Tree<std::_Tset_traits<_Kty,_Pr,_Alloc,false>>::_Find_lower_bound<_Key>(const _Keyty &) const”的引用
          with
          [
              _Alloc=std::allocator<Person>,
              _Kty=Person,
              _Pr=comparePerson,
              _Key=Person,
              _Keyty=Person
          ]
          D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xtree(1610,17):
          查看对正在编译的函数 模板 实例化“bool std::_Debug_lt_pred<const comparePerson&,const _Kty&,const _Keyty&>(_Pr,_Ty1,_Ty2) noexcept(<expr>)”的引用
          with
          [
              _Kty=Person,
              _Keyty=Person,
              _Pr=const comparePerson &,
              _Ty1=const Person &,
              _Ty2=const Person &
          ]
  
D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1521,32): error C3848: 具有类型“const comparePerson”的表达式会丢失一些 const-volatile 限定符以调用“bool comparePerson::operator ()(Person &,Person &)”
  (编译源文件“STL.cpp”)
      D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1521,32):
      尝试匹配参数列表“(const _Keyty, const _Keyty)”时
          with
          [
              _Keyty=Person
          ]
      D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1521,32):
      模板实例化上下文(最早的实例化上下文)为
          D:\visualstudio2022\VC\Tools\MSVC\14.41.33923\include\xutility(1528,39):
          查看指向正在编译的变量模板“const bool _Debug_lt_pred_order_check_noexcept<comparePerson const &,Person const &,Person const &,1>”的引用
  
